#!/bin/bash

CONT_NAME='php-sw'
RUN_NAME="run-${CONT_NAME}"
DOCKER_DIR=$(dirname $0)
THIS_SCRIPT=$(basename $0)

cd $(echo ${DOCKER_DIR} | sed 's#docker/web#SynchWeb#g')

HOST_WORK_DIR=$(pwd)
CONT_WORK_DIR='/usr/local/src'

# This is complicated - would be easier if we just had the VPN connection in
# fabrika.lan
DNS_SERVERS=$(
   for CONNECTION in $(
      nmcli --terse --fields UUID connection show --active
   )
   do
      nmcli --terse -fields IP4.DNS connection show $CONNECTION
   done | awk -F: '{ print "--dns " $2 }'
)

if [[ ${THIS_SCRIPT} != 'container' ]]
then
    TASK='shell'
    TTY=''
    case ${THIS_SCRIPT} in
    'php')
        COMMAND="php $@"
        ;;
    phpcs|phpmd)
        COMMAND="lint-docker ${THIS_SCRIPT} ${HOST_WORK_DIR} ${CONT_WORK_DIR} $@"
        ;;
    esac
else
    TASK='shell'
    TTY='--tty'
    case $1 in
    'shell')
        COMMAND='bash'
        ;;
    'backend')
        COMMAND="php -S 0.0.0.0:8000"
        CONT_WORK_DIR="${CONT_WORK_DIR}/api"
        ;;
    'frontend')
        COMMAND="npm run serve -- --env.proxy.target=http://0.0.0.0:8000/ --host=0.0.0.0"
        CONT_WORK_DIR="${CONT_WORK_DIR}/client"
        ;;
    *)
        TASK=$1
        ;;
    esac
fi

case $TASK in
'run')
    docker build --tag ${CONT_NAME} ${DOCKER_DIR}

    docker run \
        --rm --interactive --tty \
        --workdir ${CONT_WORK_DIR} \
        --publish 8000:8000 \
        --publish 9000:9000 \
        ${DNS_SERVERS} \
        --user $(id -u):$(id -g) \
        --volume ${HOST_WORK_DIR}:${CONT_WORK_DIR} \
        --volume ${HOME}/.ssh:/home/dev/.ssh:ro \
        --name ${RUN_NAME} \
        ${CONT_NAME} bash
    ;;
'shell')
    # wait for container to be up efore trying anything
    until [[ $(docker container ls | grep ${RUN_NAME} | wc -l) == 1 ]]
    do
        sleep 0.1
    done

    docker container exec \
        --interactive ${TTY} \
        --workdir ${CONT_WORK_DIR} \
        ${RUN_NAME} ${COMMAND}
    ;;
*)
    echo "run from the project working directory"
    echo "../docker/php/container run        {start container}"
    echo "../docker/php/container shell      {bash}"
    echo "../docker/php/container backend    {PHP dev. server for back end}"
    echo "../docker/php/container frontend   {Webpack dev. server for back end}"
    echo "../docker/php/phpcs                {run php code sniffer}"
    echo "../docker/php/phpmd                {run php mess detector}"
    ;;
esac
